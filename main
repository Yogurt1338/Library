#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <conio.h>
#include <locale.h>
#include <malloc.h>
#include <time.h>
#include <windows.h>
#define _CRT_SECURE_NO_WARNINGS
#define D_CRT_NONSTDC_NO_WARNINGS
#define N 50
#define B 30
#define MAX 100
#pragma warning(disable : 4996)

struct books { unsigned long long int isbn; char author[N]; char title[N]; int all; int ava; };
struct books book[MAX];

struct students { char num[8]; char name[B]; char sname[B]; char otch[B]; char fak[4];  char napr[N]; };
struct students student[MAX];

struct users { char login[20]; char pass[20]; int stud; int book; };
struct users user[MAX];

int BookFileOpen();
int StudentFileOpen();
int UserFileOpen();

int UserAccess(char* login, char* pass, int usercount);

void StudentAdd(int studcount);
void StudentDelete(int studcount);
void BookAdd(int strcount);
void BookDelete(int strcount);

void Recovery(int strcount, int q);
void Backup(int strcount, int q);

char* settime(struct tm* u);
void SeacrhByAuthor(int strcount);
void SearchBySurname(int studcount);

FILE* file;

void Valid(int q)
{
    if (q == 1)
    {
        if ((file = fopen("users.csv", "r")) == NULL)
        {
            printf("Can't open users.csv");
            exit(4);
        }
    }
    if (q == 2)
    {
        if ((file = fopen("books.csv", "r")) == NULL)
        {
            printf("Can't open books.csv");
            exit(1);
        }
    }
    if (q == 3)
    {
        if ((file = fopen("students.csv", "r")) == NULL)
        {
            printf("Can't open students.csv");
            exit(1);
        }
    }
}

void Locale()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");
}

int main()
{
    
    Locale();

    int num;
    int status;
    int usercoun = UserFileOpen();
    char pass[20], login[20];
    int tr=0;
    
    for (; tr == 0;) 
    {
        printf("Введите логин: "); scanf("%s", login);
        printf("Введите пароль: "); scanf("%s", pass);
        status = UserAccess(login, pass, usercoun);
        if (status != 0) tr = 1;
    }        
    system("cls");
    tr = 0;
    if (status == 1)
    {
        printf("Admin menu:\n 1.book \n 2.Student \n 3.Exit \n");
        scanf("%d", &status);
        for (; tr == 0;)
        {
            if (status == 2) tr = 1;
            else if (status == 3) exit(0);
            else if (status == 1) { tr = 1; status = 3; }
            else printf("wrong number");
        }
        system("cls");
    }
    if (status == 2)
    printf("menu:\n 1.Add student \n 2.Delete student \n 3.Do backup student \n 4.Recovery student \n 5.Search student \n 6.Exit \n");
    if (status == 3)
    printf("menu:\n 1.Add book \n 2.Delete book \n 3.Do backup book \n 4.Recovery \n 5.Find book by Author \n 6.Exit \n");
    for (;;)
    {
    
        int strcoun = BookFileOpen();
        int studcoun = StudentFileOpen();
    
        scanf("%d", &num);
        if (status == 2)
        {
            if (num == 1)
                StudentAdd(studcoun);
            else if (num == 2)
                StudentDelete(studcoun);
            else if (num == 3)
                Backup(studcoun, 2);
            else if (num == 4)
                Recovery(studcoun, 2);
            else if (num == 5)
                SearchBySurname(studcoun);
            else if (num == 6)
                break;
            else { printf("wrong num\n"); }
        }
        if (status == 3)
        {
            if (num == 1)
                BookAdd(strcoun);
            else if (num == 2)
                BookDelete(strcoun);
            else if (num == 3)
                Backup(strcoun, 1);
            else if (num == 4)
                Recovery(strcoun, 1);
            else if (num == 5)
                SeacrhByAuthor(strcoun);
            else if (num == 6)
                break;
            else { printf("wrong num\n"); }
        }
    }    
        return 0;
}

int UserAccess(char* login, char* pass, int usercount)
{
   int i = 0;
    for (int y = 0; y < usercount; y++)
    {
        if ((strcmp(login, user[y].login) == 0) && (strcmp(pass, user[y].pass) == 0))
        {
            if ((user[y].stud == 1) && (user[y].book == 1))
                i = 1;
            if ((user[y].stud == 1) && (user[y].book == 0))
                i = 2;
            if ((user[y].stud == 0) && (user[y].book == 1))
                i = 3;
                break;
        }
    }
    if (i == 0)
        printf("Wrong login/pass\ntry again\n");
    return i;
}


int UserFileOpen()
{
    Valid(1);

    int i;
    for (i = 0; !feof(file); i++)
    {
        fscanf(file, "%[^;]%*c", user[i].login);
        fscanf(file, "%[^;]%*c", user[i].pass);
        fscanf(file, "%d", &user[i].stud);
        getc(file);
        fscanf(file, "%d", &user[i].book);
        getc(file);
    }
    fclose(file);
    return i;
}

int BookFileOpen()
{
    Valid(2);
    int i;
    for (i = 0; !feof(file); i++)
    {
        fscanf(file, "%lld", &book[i].isbn);
        getc(file);
        fscanf(file, "%[^;]%*c", book[i].author);
        fscanf(file, "%[^;]%*c", book[i].title);
        fscanf(file, "%d", &book[i].all);
        getc(file);
        fscanf(file, "%d", &book[i].ava);
        getc(file);
    }
    fclose(file);
    return i;
}


/////////////////////
// ДОБАВЛЕНИЕ КНИГ //
/////////////////////


void BookAdd(int strcount)
{
    unsigned long long int isbn;
    char author[N], title[N];
    int all, ava;
    int q = 0;

    Locale();
    Valid(2);
    fclose(file);

    file = fopen("books.csv", "a+");

    printf("Введите ISBN книги, которую хотите добавить: ");
    scanf("%lld", &isbn);

    for (int y = 0; y < strcount; y++)
    {
        if (isbn == book[y].isbn)
        {
            printf("Такая книга уже есть"); exit(2);
        }
    }

    printf("Автор: ");   scanf("%s", author);
    printf("Название: ");
    char c = getchar();
    while ((c = getchar()) != '\n')
    {
        title[q] = c; q++;
    }
    title[q] = '\0';

    printf("Всего книг: ");      scanf("%d", &all);
    printf("Доступно: ");        scanf("%d", &ava);

    fprintf(file, "\n%lld;%s;%s;%d;%d", isbn, author, title, all, ava);
    fclose(file);
    printf("\nКнига добавлена\n");
}


//////////////////
// УДАЛЕНИЕ КНИГ//
//////////////////


void BookDelete(int strcount)
{
    unsigned long long int isbn;

    Valid(2);

    char* a = (char*)malloc(strcount*(sizeof(struct books)));
    int w = 0;

    printf("Введите ISBN книги, которую хотите удалить: ");
    scanf("%lld", &isbn);

    for (int y = 0; y < strcount; y++)
    {
        if (isbn != book[y].isbn)
        {
            a[w] = getc(file);
            while ((a[w] != '\n') && (!feof(file)))
            {
                w++;
                a[w] = getc(file);
            }
            a[w] = '\n'; w++;
        }
        if (isbn == book[y].isbn)
        {     
            while ((getc(file) != '\n') && (!feof(file)))
            {
                ;
            }
        }
    }
    a[w - 1] = '\0';
    fclose(file);
    
    file = fopen("books.csv", "w");

    for (int n = 0; a[n] != '\0'; n++)
        fprintf(file, "%c", a[n]);

    fclose(file);
    printf("\nКнига успешно удалена\n");
}


/////////////////////
// ПОИСК ПО АВТОРУ //
/////////////////////


void SeacrhByAuthor(int strcount)
{
    Locale();
    char surname[N];
    int i = 0;
    printf("Введите Фамилию автора для поиска книги: ");
    scanf("%s", surname);

    for (int y = 0; y < strcount; y++)
    {
        if (strcmp(surname, book[y].author) == 0)
        {
            printf("ISBN: %lld \t ", book[y].isbn);
            printf("Автор: %s \t", book[y].author);
            printf("Название: %s \t", book[y].title);
            printf("Всего книг: %d \t", book[y].all);
            printf("Доступно: %d\n", book[y].ava);
        }
    }
    printf("\n");
}


////////////////////////////////////////////////////////////////////////
////////////////// STUDENTS ///////////////////////////////////
////////////////////////////////////////////////////////////////////


int StudentFileOpen()
{
    Valid(3);
    int i;
    for (i = 0; !feof(file); i++)
    {
        fscanf(file, "%[^;]%*c", student[i].num);
        fscanf(file, "%[^;]%*c", student[i].sname);
        fscanf(file, "%[^;]%*c", student[i].name);
        fscanf(file, "%[^;]%*c", student[i].otch);
        fscanf(file, "%[^;]%*c", student[i].fak);
        fscanf(file, "%[^'\n']%*c", student[i].napr);

    }
    fclose(file);
    return i;
}


////////////////
// ДОБАВЛЕНИЕ //
////////////////


void StudentAdd(int studcount)
{
    char num[8];
    char name[B];
    char sname[B];
    char otch[B]; 
    char fak[4]; 
    char napr[N];
    Locale();
    Valid(3);
    fclose(file);

    file = fopen("students.csv", "a+");

    printf("Введите номер зачетки, которую хотите добавить: ");
    scanf("%s", num);

    int y;
    for (y = 0; y < studcount; y++)
    {
        if (strcmp(num, student[y].num) == 0)
        {
            printf("Студент уже в базе");
            exit(2);
        }
    }
    
    printf("Фамилия: "); scanf("%s", sname);
    printf("Имя: ");  scanf("%s", name);
    printf("Отчество: "); scanf("%s", otch);
    printf("факультет: "); scanf("%s", fak);
    printf("Направление: ");  
    int q = 0;
    char c = getchar();
    while ((c = getchar()) != '\n')
    {
        napr[q] = c; q++;
    }
    napr[q] = '\0';
    
    fprintf(file, "\n%s;", num);
    fprintf(file, "%s;", sname);
    fprintf(file, "%s;", name);
    fprintf(file, "%s;", otch);
    fprintf(file, "%s;", fak);
    fprintf(file, "%s", napr);

    fclose(file);
    printf("\nСтудент добавлен\n");
}


////////////////
// УДАЛЕНИЕ //
////////////////


void StudentDelete(int studcount)
{
    char num[8];
    int w = 0;

    Locale();
    Valid(3);

    printf("Введите номер зачетки, которую хотите удалить: ");
    scanf("%s", num);
   
    char* a = (char*)malloc((sizeof(struct students)));

    for (int y = 0; y < studcount; y++)
    {
        if (strcmp(num, student[y].num) == 0)
        {
            while ((getc(file) != '\n') && (!feof(file)))
            {
                ;
            }
        }
        if (strcmp(num, student[y].num) != 0)
        {
            a[w] = getc(file);
            while ((a[w] != '\n') && (!feof(file)))
            {
                w++;
                a[w] = getc(file);
            }
            a[w] = '\n'; w++;
        }
    }
    a[w - 1] = '\0';
    fclose(file);

    file = fopen("students.csv", "w");

    for (int n = 0; a[n] != '\0'; n++)
        fprintf(file, "%c", a[n]);

    fclose(file);
    printf("Студент успешно удален\n");
}


/////////////////////
// ПОИСК ПО ФАМИЛИИ //
/////////////////////


void SearchBySurname(int studcount)
{
    Locale();
    char surname[N];
    printf("Введите Фамилию Студента: ");
    scanf("%s", surname);

    for (int y = 0; y < studcount; y++)
    {
        if (strcmp(surname, student[y].sname) == 0)
        {
            printf("Зачетка %s \t ", student[y].num);
            printf("Фамилия: %s \t", student[y].sname);
            printf("Имя: %s \t", student[y].name);
            printf("Отчество: %s \t", student[y].otch);
            printf("Факультет: %s\t", student[y].fak);
            printf("Направление: %s\n", student[y].napr);
        }
    }
    printf("\n");
}


//////////////////////////////
// ВОССТАНОВЛЕНИЕ ИЗ БЭКАПА //
//////////////////////////////

void Recovery(int strcount,int q)
{
    int y;
    char name[MAX];
    int b = 0;
   
    if (q == 1)
        printf("Введите название в форме <<books_DD.MM.YYYY HH.MM.csv>>: ");
    if (q == 2)
        printf("Введите название в форме <<students_DD.MM.YYYY HH.MM.csv>>: ");

    char c = getchar();
    c = getchar();
    while (c != '\n')
    {
        name[b] = c;
        b++;
        c = getchar();
    }
    name[b] = '\0';

    fclose(file);

    file = fopen(name, "r");

    char* a = (char*)malloc((sizeof(char)));
    int n = 0;

    for (y = 0; !feof(file); y++)
    {
        a = (char*)realloc(a, (y + 1) * (sizeof(char)));
        a[y] = getc(file);
    }
    a[y - 1] = '\0';

    fclose(file);

    if (q == 1)
    {
        file = fopen("books.csv", "w");
    }
    if (q == 2)
        file = fopen("students.csv", "w");

    for (int e = 0; (a[e] != '\0'); e++)
        fprintf(file, "%c", a[e]);

    fclose(file);

    printf("Файл восстановлен из %s", name);
    printf("\n");
}


///////////
// БЭКАП //
///////////


char* settime(struct tm* u)
{
    char s[40];
    char* tmp;
    for (int i = 0; i < 40; i++) s[i] = 0;
    int length = strftime(s, 40, "%d.%m.%Y %H.%M", u);
    tmp = (char*)malloc(sizeof(s));
    strcpy(tmp, s);
    return(tmp);
    free(tmp);
}


void Backup(int strcount, int q)
{
    int y;
    struct tm* u;
    char* stri;
    const time_t timer = time(NULL);
    u = localtime(&timer);
    stri = settime(u);

    char* a = 0;
    char name[31];
    if (q == 1)
    {
        Valid(2);
        a = (char*)malloc(strcount * (sizeof(struct books)));
        name[0] = 'b'; name[1] = 'o'; name[2] = 'o'; name[3] = 'k'; name[4] = 's'; name[5] = '_';
        for (int lon = 6; stri[lon - 6] != '\0'; lon++)
        {
            name[lon] = stri[lon - 6];
        }
        name[19] = '.'; name[22] = '.'; name[23] = 'c'; name[24] = 's'; name[25] = 'v'; name[26] = '\0';
    }
    if (q == 2)
    {
        Valid(3);
        a = (char*)malloc(strcount * (sizeof(struct students)));
        name[0] = 's'; name[1] = 't'; name[2] = 'u'; name[3] = 'd'; name[4] = 'e'; name[5] = 'n';
        name[6] = 't'; name[7] = 's'; name[8] = '_';

        for (int lon = 9; stri[lon - 9] != '\0'; lon++)
        {
            name[lon] = stri[lon - 9];
        }
        name[22] = '.'; name[25] = '.'; name[26] = 'c'; name[27] = 's'; name[28] = 'v'; name[29] = '\0';
    }

    for (y = 0; !feof(file); y++)
    {
        a[y] = getc(file);
    }
    a[y - 1] = '\0';

    file = fopen(name, "w");

    for (int e = 0; (a[e] != '\0'); e++)
        fprintf(file, "%c", a[e]);

    fclose(file);

    if ((file = fopen(name, "r")) != NULL)
    {
        printf("Success\n");
        printf("Создан %s", name);
    }
    else printf("\nerror");
    printf("\n");
}
